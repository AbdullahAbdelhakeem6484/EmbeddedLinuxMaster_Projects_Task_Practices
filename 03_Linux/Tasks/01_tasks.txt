01- What is the file of resolv.conf
    The resolv.conf file is a configuration file used by Linux and other Unix-like operating systems to configure DNS (Domain Name System) resolver libraries.
    It typically contains information about the DNS servers that the system should use for domain name resolution.
    The file is usually located in the /etc directory, and you can view its contents using a text editor like nano or vi. The actual path is often /etc/resolv.conf.

    (base) abdullah@IT-EG-LPT0021:~/ES_Linux_Moatasem/04_Bash$ cat /etc/resolv.conf
    # This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:
    # [network]
    # generateResolvConf = false
    nameserver 192.168.1.1
    nameserver 192.168.1.1
    nameserver fe80::1
    search home

/*************************************************/
02- what is the fstab file
    The fstab file, which stands for "file system table," is a configuration file used by Unix and Unix-like operating systems to define how file systems are to be mounted and accessed.
    It contains information about various partitions and storage devices on the system, specifying where they should be mounted in the directory hierarchy and with what options.
    Typically located in the /etc directory, the fstab file helps the operating system understand how to mount different file systems during the boot process or
    manually using the mount command.

    Entries in the fstab file include details such as the device to mount, the mount point, the file system type, mount options, and other parameters.
    It plays a crucial role in the system's storage configuration.

    (base) abdullah@IT-EG-LPT0021:~/ES_Linux_Moatasem/04_Bash$ cat /etc/fstab
    LABEL=cloudimg-rootfs   /        ext4   defaults        0 0
/*************************************************/
03- what is the .bashrc and .bash_profile and the difference
    The .bashrc and .bash_profile files are configuration files used by the Bash shell

    .bashrc: Used for user-specific Bash configurations in each interactive shell session.
    .bash_profile: Executed only during the initial login, typically used for broader, session-wide settings. Often includes or sources .bashrc for consistency.


        +------------------+----------------------------------+----------------------------------+
        |                  | .bashrc                          | .bash_profile                     |
        +------------------+----------------------------------+-----------------------------------+
        | **Execution**    | Per each new interactive shell   | Executed only during initial      |
        |                  | session                          | login                             |
        +------------------+----------------------------------+-----------------------------------+
        | **Scope**        | User-specific configurations     | Broader, session-wide settings    |
        +------------------+----------------------------------+-----------------------------------+
        | **Common Usage** | Environment variables, aliases,  | Environment variables, path       |
        |                  | per-session settings             | variables, broader configurations |
        +------------------+----------------------------------+-----------------------------------+
        | **Includes**     | Not typically sourced by         | May include or source .bashrc     |
        |                  | .bash_profile                    | for consistency                   |
        +------------------+----------------------------------+-----------------------------------+


/*************************************************/
04- what is the file of passwd and groups ?
In Linux, the files containing information about user accounts and groups are located in the /etc directory:
    passwd:
        The passwd file is located at /etc/passwd.
    group:
        The group file is located at /etc/group.
    These files store essential information about user accounts and groups on the system.
    If you want to view the contents of these files, you can use a text editor or command-line tools like cat or less. For example:

    cat /etc/passwd
    cat /etc/group

/*************************************************/
05- what is the crontab file , where can i find it, what inside it?
The crontab file is a configuration file used to schedule periodic tasks, often referred to as cron jobs, on Unix-like operating systems,
including Linux. Each user can have their own crontab file to schedule tasks specific to their needs.
Here's some information about the crontab file in Linux:

Location:
    The crontab files are stored in the /var/spool/cron directory. Each user has their own crontab file in this directory.
    Viewing/Editing:

You can view and edit your own crontab file using the crontab command. For example, to edit the crontab for the current user, you can use:
        crontab -e

Contents:
    The crontab file consists of lines specifying the schedule and command to be executed. Each line represents a separate cron job.
    The format of a cron job line is as follows:
        m h dom mon dow command
            m: Minute (0 - 59)
            h: Hour (0 - 23)
            dom: Day of month (1 - 31)
            mon: Month (1 - 12)
            dow: Day of week (0 - 6, where Sunday is 0)
            command: The command to be executed.
        Example:
                0 2 * * * /path/to/script.sh
                This cron job runs the specified script every day at 2:00 AM.

    If you want to see the crontab for a specific user, you can use:
        crontab -l -u username
        This command will display the current crontab for the specified user.
/*************************************************/
06- what is the uptime file , where can i find it, what inside it?
    In Linux, there isn't a specific "uptime file" that stores the system uptime information.
    Instead, you can retrieve the system uptime dynamically using the uptime command.

    Here's how you can use the uptime command:

    Open a terminal.
    Type the following command and press Enter:
        uptime

    This command will display information about the system's uptime, current time, number of logged-in users, and load averages.
        (base) abdullah@IT-EG-LPT0021:/mnt/c/SEITech_Solutions2023/18- ES/ES Linux/Moatasm/EmbeddedLinuxMaster_Projects&Tasks$ uptime
        16:24:51 up 1 day,  3:10,  0 users,  load average: 0.52, 0.58, 0.59

/*************************************************/

07- what is the "/proc/cmdline" file , what inside it?

    The /proc/cmdline file in Linux contains the command line parameters that were passed to the kernel during the system's boot process.
    This file provides a way to view the arguments that were used when the kernel was started.

    To view the contents of the /proc/cmdline file, you can use a command like:
        cat /proc/cmdline
    The output will typically include various parameters such as the kernel name, root filesystem, kernel command-line options, and other settings specified during the boot process.

    (base) abdullah@IT-EG-LPT0021:/mnt/c/SEITech_Solutions2023/18- ES/ES Linux/Moatasm/EmbeddedLinuxMaster_Projects&Tasks$ cat /proc/cmdline
    BOOT_IMAGE=/kernel init=/init

/*************************************************/

08- what is the "sources.list " file , what inside it?
    The sources.list file in Debian-based Linux distributions, such as Ubuntu, is a configuration file used by the package management system (usually APT - Advanced Package Tool).
    This file specifies the repositories from which the system can fetch and install software packages.

    The sources.list file is typically located in the /etc/apt directory. You can view its contents using a text editor, such as nano or vi. To view it, you can use a command like:
    cat /etc/apt/sources.list

    The contents of the sources.list file will list different repositories along with their details.
    Each line typically represents a repository and includes information such as the repository URL, distribution codename, components, and optional settings.

    In this example:

    deb lines are for binary packages.
    deb-src lines are for source packages.
    http://archive.ubuntu.com/ubuntu/ is the base URL for the repository.
    focal is the distribution codename (e.g., Ubuntu 20.04).
    main and restricted are components that categorize packages.

    (base) abdullah@IT-EG-LPT0021:/mnt/c/SEITech_Solutions2023/18- ES/ES Linux/Moatasm/EmbeddedLinuxMaster_Projects&Tasks$ cat /etc/apt/sources.list
    # See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to
    # newer versions of the distribution.
    deb http://archive.ubuntu.com/ubuntu/ bionic main restricted
    # deb-src http://archive.ubuntu.com/ubuntu/ bionic main restricted

    ## Major bug fix updates produced after the final release of the
    ## distribution.
    deb http://archive.ubuntu.com/ubuntu/ bionic-updates main restricted
    # deb-src http://archive.ubuntu.com/ubuntu/ bionic-updates main restricted

    ## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu
    ## team. Also, please note that software in universe WILL NOT receive any
    ## review or updates from the Ubuntu security team.
    deb http://archive.ubuntu.com/ubuntu/ bionic universe
    # deb-src http://archive.ubuntu.com/ubuntu/ bionic universe
    deb http://archive.ubuntu.com/ubuntu/ bionic-updates universe
    # deb-src http://archive.ubuntu.com/ubuntu/ bionic-updates universe

/*************************************************/

09- what is the "XDG_SESSION_TYPE" Variable ?

    The XDG_SESSION_TYPE environment variable is used in Linux desktop environments to indicate the type of session being used.
    It is part of the XDG (X Desktop Group) standard, which defines a set of common directories and environment variables for desktop environments.

    The XDG_SESSION_TYPE variable can have different values, typically one of the following:

    x11: Indicates that the session is using the X Window System (X11). This is the traditional display server protocol used in many Linux desktop environments.

    wayland: Indicates that the session is using the Wayland display server protocol.
    Wayland is a more modern alternative to X11 and is designed to be a simpler and more efficient protocol for compositing window managers.

    This variable is often used by applications and scripts to determine the type of display server in use, allowing them to adapt their behavior accordingly.
    For example, an application might use different code paths or settings depending on whether it's running under X11 or Wayland.

    You can check the value of XDG_SESSION_TYPE in the terminal using the echo command:


        echo $XDG_SESSION_TYPE
    The output will be either x11 or wayland depending on your desktop environment and session type.




/*************************************************/

10- what is the "DISPLAY" Variable? indetails? why is it important?
    The DISPLAY environment variable in Linux specifies the X Window System server to which GUI applications connect.
    It has the format hostname:display_number.screen_number and is crucial for applications to know where to display their graphical output.
    The variable is essential for communication between applications and the X server in a graphical environment.
    If not set or set incorrectly, GUI applications may fail to display correctly.
        export DISPLAY=:1.0
    Example:

If your DISPLAY variable is set to :0.0, it means the application should connect to the default X server on the local machine.
Changing DISPLAY:

    You can set the DISPLAY variable explicitly to connect a GUI application to a specific X server. For example:
         export DISPLAY=:1.0
    Remote Display:
    If you're running X11 over a network, the DISPLAY variable can specify a remote server. For example:
        export DISPLAY=remotehostname:0.0

/*************************************************/

11- use timezone?

    View the Current Time and Date:
        timedatectl

    List Available Timezones:
        timedatectl list-timezones

    Set the Timezone:
        sudo timedatectl set-timezone your/timezone

        Replace your/timezone with the desired timezone (e.g., America/New_York).

    Synchronize the System Clock with the Hardware Clock:
        sudo hwclock --systohc

    These commands allow you to view, set, and manage the timezone and system clock on your Linux system.
    Adjusting the timezone is important for accurate timekeeping and for ensuring that timestamps in logs and other system records are correct.

    If your system doesn't use systemd, you may have a different method for managing the timezone,
    such as editing the /etc/timezone file or creating a symbolic link to the appropriate timezone file in /usr/share/zoneinfo.
    The specific steps can vary based on your Linux distribution.
/*************************************************/

12- Test to turn on/off capslock (open the file and echo 0/1 > brightness)
    -- sudo apt-get install xdotool  # For Debian/Ubuntu
    -- xdotool key Caps_Lock
    -- echo "1" > /tmp/caps_lock_status

